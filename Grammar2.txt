SSSTART:START
START:A START
START:$
A:DECLARE
A:DEFINE
DECLARE:TYPE DECLARE1 DECLARE2 ;
TYPE:char
TYPE:int
TYPE:double
TYPE:float
TYPE:string
TYPE:long
DECLARE1:identifier DECLARE3
DECLARE3:= EXPRESSION
DECLARE3:$
DECLARE2:, DECLARE1 DECLARE2
DECLARE2:$
EXPRESSION:CONSTEXPRESSION
EXPRESSION:FUNCTIONEXPRESSION
FUNCTIONEXPRESSION:function identifier ( EXPRESS )
EXPRESS:EXPRESSION EXPRESS1
EXPRESS:$
EXPRESS1:, EXPRESSION EXPRESSION1
EXPRESS1:$
CONSTEXPRESSION:CONST1 CONST2
CONST1:identifier
CONST1:constant
CONST1:( EXPRESSION )
CONST2:operation CONST1 CONST2
CONST2:$
operation:+
operation:-
operation:*
operation:/
operation:%
operation:^
operation:&
operation:<
operation:>
operation:<=
operation:>=
Operation:=
Operation:+ =
Operation:- =
Operation:* =
Operation:/ =
Operation:% =
Operation:^ =
Operation:& =
DEFINE:function TYPE identifier ( FORPARAMETER ) BODY
FORPARAMETER:FORPARAMETER1 FORPARAMETER2
FORPARAMETER:$
FORPARAMETER1:TYPE identifier
FORPARAMETER2:, FORPARAMETER1 FORPARAMETER2
FORPARAMETER2:$
BODY:{ MAINBODY }
MAINBODY:BODY1 MAINBODY
MAINBODY:$
BODY1:DECLARE
BODY1:BODY
BODY1:XUNHUAN
BODY1:TIAOJIAN
BODY1:JUMP
BODY1:ABOUTEXPRESSION
XUNHUAN:while ( EXPRESSION ) BODY1
XUNHUAN:for ( DECLARE EXPRESSION ; EXPRESSION ) { BODY1 }
TIAOJIAN:if ( EXPRESSION ) BODY1 else BODY1
JUMP:continue ;
JUMP:break ;
JUMP:return EXPRESSION ;
ABOUTEXPRESSION:scanf ( identifier ) ;
ABOUTEXPRESSION:print ( EXPRESSION ) ;
ABOUTEXPRESSION:ABOUTEXPRESSION1 ;
ABOUTEXPRESSION1:ABOUTEXPRESSION11 ABOUTEXPRESSION12
ABOUTEXPRESSION1:$
ABOUTEXPRESSION11:identifier Operation EXPRESSION
ABOUTEXPRESSION12:, ABOUTEXPRESSION11 ABOUTEXPRESSION12
ABOUTEXPRESSION12:$
